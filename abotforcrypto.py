import random
import requests
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, executor

API_TOKEN = '6297165368:AAHhVEqdCLKex9UOI4OXNVy08Trc5nGPEYc'  # –£–∫–∞–∂–∏—Ç–µ –∑–¥–µ—Å—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω API
logging.basicConfig(level=logging.INFO)
# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('polzovateli.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        username TEXT,
        first_name TEXT,
        last_name TEXT,
        easter_eggs INTEGER DEFAULT 0
    )
''')
conn.commit()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


def get_crypto_price(symbol):
    url = f'https://api.coingecko.com/api/v3/simple/price?ids={symbol}&vs_currencies=usd,eur,uah,rub'
    response = requests.get(url)
    data = response.json()
    return data[symbol]


def get_market_cap():
    url = 'https://api.coingecko.com/api/v3/global'
    response = requests.get(url)
    data = response.json()
    market_cap = data['data']['total_market_cap']['usd']
    return market_cap


def get_user_easter_eggs(user_id):
    cursor.execute('SELECT easter_eggs FROM users WHERE id=?', (user_id,))
    result = cursor.fetchone()
    if result is not None:
        return result[0]
    return 0


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
        INSERT OR IGNORE INTO users (id, first_name)
        VALUES (?, ?)
    ''', (user_id, first_name))
    conn.commit()

    username = message.from_user.username
    cursor.execute('UPDATE users SET username=?, first_name=? WHERE id=?', (username, first_name, user_id))
    conn.commit()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button_stats = types.KeyboardButton('üìä –ö—Ä–∏–ø—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    button_profile = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')
    button_easter_eggs = types.KeyboardButton('üê∞ –ü–∞—Å—Ö–∞–ª–∫–∏')
    keyboard.add(button_stats, button_profile, button_easter_eggs)

    start_text = f"ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞ –∫—Ä–∏–ø—Ç–æ —Ä—ã–Ω–∫–∞.\nüöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/id - –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞\n/updinf - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏—è—Ö\n/donate - –¥–æ–Ω–∞—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É —Ö–æ—Å—Ç–∏–Ω–≥–∞"

    await message.reply(start_text, reply_markup=keyboard)


@dp.message_handler(commands=['id'])
async def get_chat_id(message: types.Message):
    await message.reply(f"Chat ID: {message.chat.id}")


@dp.message_handler(commands=['updinf'])
async def show_update_info(message: types.Message):
    update_info = f"–í–µ—Ä—Å–∏—è 1.0: –¥–æ–±–∞–≤–ª–µ–Ω –æ–±—ã—á–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ 3 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã\n–í–µ—Ä—Å–∏—è 1.1.0: –ø–æ–ø—ã—Ç–∫–∞ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –±–µ–∑—É—Å–ø–µ—à–Ω–æ\n–í–µ—Ä—Å–∏—è 1.2.0: –¥–æ–±–∞–≤–ª–µ–Ω–æ /info\n–í–µ—Ä—Å–∏—è 1.3.0: –∑–∞–º–µ–Ω–µ–Ω–æ aiohttp –Ω–∞ requests\n–í–µ—Ä—Å–∏—è 1.3.1: —É–¥–∞–ª–µ–Ω aiohttp, —Ç–∞–∫ –∫–∞–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å\n–í–µ—Ä—Å–∏—è 1.3.2: –¥–æ–±–∞–≤–ª–µ–Ω–æ –±–æ–ª—å—à–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞, —É–¥–∞–ª–µ–Ω–æ /info\n1.3.3: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /donate, –ø—Ä–æ—Ñ–∏–ª—å,–ø–∞—Å—Ö–∞–ª–∫–∏, —É–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –±–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–í –ø–ª–∞–Ω–∞—Ö: —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"

    await message.reply(update_info)


@dp.message_handler(text='üìä –ö—Ä–∏–ø—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def show_crypto_stats(message: types.Message):
    market_cap = get_market_cap()
    crypto_symbols = ['bitcoin', 'ethereum', 'litecoin', 'bitcoin-cash', 'ripple', 'stellar', 'cardano', 'eos',
                      'tezos', 'chainlink', 'polkadot', 'tron']

    stats_text = "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:\n"

    for symbol in crypto_symbols:
        crypto_price = get_crypto_price(symbol)
        stats_text += f"{symbol.capitalize()}: {format_price(crypto_price)}\n"

    stats_text += f"–û–±—â–∏–π —Ä—ã–Ω–æ—á–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞: ${market_cap}"

    await message.reply(stats_text)


@dp.message_handler(commands=['donate'])
async def donate(message: types.Message):
    await message.reply(
        f"üí∞ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å!\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∞–¥—Ä–µ—Å–∞:\n"
        f"BTC: <code>bc1qvdkm9t0fyep5t2e7cyejnhddwmzf77xu3l0j8n</code>\n"
        f"ETH: <code>0x606dfAf553f6C93Cc95CE321DBdC0923bf92623c</code>\n"
        f"TRX: <code>TEvrCSUHSignbKic3xLHxemKgCJCLNB8H5</code>\n"
        f"BCH: <code>qzlpz9es5dqxd7tpurlxfcvvjgp564p9vvcw5hsevq</code>\n"
        f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè",
        parse_mode='html'
    )


@dp.message_handler(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å')
async def show_profile(message: types.Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    username = message.from_user.username

    cursor.execute('UPDATE users SET username=?, first_name=? WHERE id=?', (username, first_name, user_id))
    conn.commit()

    easter_eggs_found = get_user_easter_eggs(user_id)

    keyboard = types.InlineKeyboardMarkup()
    button_ladybug = types.InlineKeyboardButton('üêû', callback_data='ladybug')

    if random.random() < 0.01:
        keyboard.add(button_ladybug)

    profile_text = f"–ò–º—è: {first_name}\n–ê–π–¥–∏: {user_id}\n\n–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Å—Ö–∞–ª–∫–∏: {easter_eggs_found}"

    await message.reply(profile_text, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'ladybug')
async def ladybug_found(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    first_name = callback_query.from_user.first_name

    easter_eggs_found = get_user_easter_eggs(user_id)

    await bot.answer_callback_query(callback_query.id, text="–í—ã –Ω–∞—à–ª–∏ –ø–∞—Å—Ö–∞–ª–∫—É!")
    await bot.send_message(callback_query.from_user.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {first_name}! –í—ã –Ω–∞—à–ª–∏ –ø–∞—Å—Ö–∞–ª–∫—É!")

    cursor.execute('UPDATE users SET easter_eggs=? WHERE id=?', (easter_eggs_found + 1, user_id))
    conn.commit()


@dp.message_handler(text='üê∞ –ü–∞—Å—Ö–∞–ª–∫–∏')
async def show_easter_eggs(message: types.Message):
    easter_eggs_found = get_user_easter_eggs(message.from_user.id)
    total_easter_eggs = 10  # –£–∫–∞–∂–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Ö–∞–ª–æ–∫
    progress = easter_eggs_found / total_easter_eggs

    easter_eggs_text = f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Å—Ö–∞–ª–∫–∏: {easter_eggs_found}/{total_easter_eggs} ({progress:.0%})"

    await message.reply(easter_eggs_text)


def format_price(price_data):
    price_usd = price_data['usd']
    price_eur = price_data['eur']
    price_uah = price_data['uah']
    price_rub = price_data['rub']

    return f"{price_usd}$, {price_eur}‚Ç¨, {price_uah}‚Ç¥, {price_rub}‚ÇΩ"


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
